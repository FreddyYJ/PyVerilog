Should I tack the submod method name to the input port name so that we don't have to dedup the ports?
  Maybe only if there's a collision?

check in the tracer that if we bind to a dedup'd port, we always end up with the
same expression at each port... somehow?


Tick methods must _not_ be allowed to call getters that take params

If we don't emit anything for a tick() or tock(), we should not emit the tock itself

tests to increase coverage
  bad output dir
  no output dir
  echo
  no source root
  lhs of assignment is array
  sra
  final block?
  all the discrete bit extract sizes
  decl without initialization value
  static const
  emit_field_as_enum_class
  emit_output_ports when current_mod->submods.empty()
  non-optional template parameter
  compound statement with a declaration
  emit_template_param_list?
  emit_enum_list
  emit_number_literal with hex and binary literals
  emit_break
  emit_condition - ternary
  emit_qualified_id?
  emit_enum_specifier
  emit_using_decl
  emit_decl static const
  emit_sized_type_spec?
  emit_namespace_def
  most of the emit_preproc branches
  string literal?
  MtModLibrary::reset
  MtModLibrary::find_source
  couldn't find x in path
  MtModule::init - template without params? template without class?
  source file without class
  regs and sigs that end in a bad state?
  duplicate input ports, output ports (somehow?), regs?, submods?
  unused Mn - MnIdentifer, MnFieldDeclList, MnTemplateFunc
  modules using primitive C++ types and stdints
  Delete source file objects on shutdown
  prefix and postfix operators - x++ ++x
  trace sym_subscript_expression? handled elsewhere?
  private init
  const init
  const tick
  const tock
  const task


preserving port order test










----------

assert that submodules are only bound once?
  no, they can be bound multiple times, won't break anything
submod calls can only be at toplevel?
  no, but they have to be in a compound statement so we have a place to put bindings

