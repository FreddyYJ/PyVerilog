// Tutorial 5

class Module {
public:
};
#include "metron_tools.h"

/*
640x480x60
Pixel clock 25.175 MHz

Screen X    [000-639]
Front porch [640-655]
HSync       [656-751]
Back porch  [752-799]

Screen Y    [000-479]
Front porch [480-489]
VSync       [490-491]
Back porch  [492-524]
*/

class VGAOut {
 public:
  logic<10> px;
  logic<10> py;

  logic<1> vga_hsync;
  logic<1> vga_vsync;
  logic<1> vga_R;
  logic<1> vga_G;
  logic<1> vga_B;

  logic<1> in_border() const {
    return (px <= 7) || (px >= 633) || (py <= 7) || (py >= 473);
  }

  logic<1> in_checker() const {
    return px[3] ^ py[3];
  }

  void update_video() {
    vga_hsync = !((px >= 656) && (py <= 751));
    vga_vsync = !((py >= 490) && (py <= 491));

    if ((px < 640) && (py < 480)) {
      vga_R = in_border() | in_checker();
      vga_G = in_border();
      vga_B = in_border();
    } else {
      vga_R = 0;
      vga_G = 0;
      vga_B = 0;
    }
  }

  void update_counters() {
    logic<10> new_px = px + 1;
    logic<10> new_py = py;

    if (new_px == 800) {
      new_px = 0;
      new_py = new_py + 1;
    }

    if (new_py == 525) {
      new_py = 0;
    }

    px = new_px;
    py = new_py;
  }

};
// If we try to update mutually-dependent fields in one function, we'll hit an
// error. Uncomment to see the error.

/*
class Module1 {
public:
  int a;
  int b;

  void update() {
    a = b + 1;
    b = a + 1;
  }
};
*/

// This module declares "update_a" first.
class Module2 {
public:
  int a;
  int b;

  void update_a() {
    a = b + 1;
  }

  void update_b() {
    b = a + 1;
  }
};

// This module declares "update_b" first.
class Module3 {
public:
  int a;
  int b;

  void update_b() {
    b = a + 1;
  }

  void update_a() {
    a = b + 1;
  }
};

// This module uses temporaries to update both A and B in a single function
class Module4 {
public:
  int a;
  int b;

  void update() {
    int old_a = a;
    int old_b = b;
    a = old_b + 1;
    b = old_a + 1;
  }
};
// We can force Metron to emit "result" as a register by reading from it before
// we write to it.
class Adder1 {
public:
  int result;
  void add(int a, int b) {
    int dummy = result;
    result = a + b;
  }
};

// Or we can prefix the function name with "tick", which does basically the
// same thing.
class Adder2 {
public:
  int tick_add(int a, int b) {
    return a + b;
  }
};
// Tutorial 3

class Module {
public:
};
#include "adder.h"
#include "counter.h"

class ModuleWithSubmodules {
public:
  int update() {
    // The field "my_counter.count" is a register, which means we can only read
    // it _before_ it is written. Uncomment this line to see the error if we
    // call update() on the counter before we send its value to the adder.
    // my_counter.update();

    int result = my_adder.add(my_counter.count, 7);

    // Our adder's "add" function can only be used _once_. Calling it a second
    // time is an error - uncomment this line to see the error.
    // int result2 = my_adder.add(3, 4);

    // The counter's update() method is a tick, but the method we're currently
    // in is a tock. This cross-module, cross-tick/tock is OK as long as the
    // target tick method does not have a return value.
    my_counter.update();
    return result;
  }

private:
  Adder my_adder;
  Counter my_counter;
};
class ModuleWithPureFunction {
public:

  // Tock methods can call pure functions.
  int get_signal1(int x) {
    return reg1 + my_pure_func(x);
  }

  // Tick methods can call pure functions.
  void update_reg() {
    reg1 = my_pure_func(reg1);
  }

private:
  int reg1;

  // This pure function is called elsewhere in the module, so it would not be
  // added to the port list even if it were public.
  int my_pure_func(int x) const {
    return x + 17;
  }

  // This pure function would appear in the port list if it were public.
  // Uncomment the line below to see the difference.
//public:
  int my_pure_func2(int x) const {
    return x + 17;
  }
};

//----------------------------------------

class ModuleWithImpureFunction {
public:
  int sig1;
  int sig2;

  // The top-level tock method will become an always_comb
  void tock1() {
    sig1 = tock2();
  }

  // This could be a function, but right now some external tools handle this
  // case weird so we emit it as an always_comb with its own set of binding
  // variables.
  int tock2() {
    sig2 = 17;
    return sig2;
  }
};

//----------------------------------------

class ModuleWithTask {
public:
  int reg1;
  int reg2;

  // The top-level tick method will become an always_ff.
  void tick1() {
    reg1 = reg1 + 1;
    tick2();
  }

  // Tick methods called by other tick methods will become tasks.
  void tick2() {
    reg2 = reg2 + 1;
  }
};
class Adder {
public:
  int add(int a, int b) {
    return a + b;
  }
};

//----------

class Adder2 {
public:
  int a;
  int b;
  int sum;

  void add() {
    sum = a + b;
  }
};
// Tutorial 4

class Module {
public:
};
class Tutorial2 {
public:

  int get_thing() {
    return 1;
  }
};
#include "metron_tools.h"

class Module {
  // Private only so we don't spam our port list for this example
private:

  // Logic types can be indexed like arrays that return individual bits.
  logic<1> extract_bit_four(logic<16> a) {
    return a[4];
  }

  // bN(x, offset) is shorthand for bx<N>(x, offset) which extracts a slice
  // of the bits in a field. Slices that overflow the source will be padded
  // with 0.
  logic<3> extract_three_bits_starting_at_bit_four(logic<16> a) {
    return b3(a, 4);
  }

  // Logic types can be concatenated together, and the result's bit width will
  // be the sum of the bit widths of the arguments.
  logic<3> concatenate(logic<1> a, logic<1> b, logic<1> c) {
    return cat(a, b, c);
  }

  // Logic types can be duplicated, which is equivalent to cat(x, x, x...). The
  // result's bit width will be the product of the argument width and the dup
  // count.
  logic<9> duplicate_three_times(logic<3> a) {
    return dup<3>(a);
  }
};
// A very basic counter in plain C++, converted to Verilog using Metron.

class Counter {
public:
  int count;
  void update() {
    count++;
  }
};
class NonBlockingAssignment {
public:
  int count;
  int update_bad() {
    count = count + 1;
    return count;
  }
  /*
  int update_good() {
    int new_count = count + 1;
    count = new_count;
    return new_count;
  }
  */
};
