// Tutorial 5

class Module {
public:
};
#include "metron_tools.h"

/*
640x480x60
Pixel clock 25.175 MHz

Screen X    [000-639]
Front porch [640-655]
HSync-      [656-751]
Back porch  [752-799]

Screen Y    [000-479]
Front porch [480-489]
VSync-      [490-491]
Back porch  [492-524]
*/

class VGAOut {
 public:
  logic<1> vga_hsync;
  logic<1> vga_vsync;
  logic<1> vga_R;
  logic<1> vga_G;
  logic<1> vga_B;

  logic<10> px;
  logic<10> py;

  logic<1> in_border() const {
    return (px <= 7) || (px >= 633) || (py <= 7) || (py >= 473);
  }

  logic<1> in_checker() const {
    return px[3] ^ py[3];
  }

  void update_video() {
    vga_hsync = !((px >= 656) && (px <= 751));
    vga_vsync = !((py >= 490) && (py <= 491));

    if ((px < 640) && (py < 480)) {
      vga_R = in_border() | in_checker();
      vga_G = in_border();
      vga_B = in_border();
    } else {
      vga_R = 0;
      vga_G = 0;
      vga_B = 0;
    }
  }

  void update_counters() {
    logic<10> new_px = px + 1;
    logic<10> new_py = py;

    if (new_px == 800) {
      new_px = 0;
      new_py = new_py + 1;
    }

    if (new_py == 525) {
      new_py = 0;
    }

    px = new_px;
    py = new_py;
  }

};
// If we try to update mutually-dependent fields in one function, we'll hit an
// error. Uncomment to see the error.

/*
class Module1 {
public:
  int a;
  int b;

  void update() {
    a = b + 1;
    b = a + 1;
  }
};
*/

// This module declares "update_a" first.
class Module2 {
public:
  int a;
  int b;

  void update_a() {
    a = b + 1;
  }

  void update_b() {
    b = a + 1;
  }
};

// This module declares "update_b" first.
class Module3 {
public:
  int a;
  int b;

  void update_b() {
    b = a + 1;
  }

  void update_a() {
    a = b + 1;
  }
};

// This module uses temporaries to update both A and B in a single function
class Module4 {
public:
  int a;
  int b;

  void update() {
    int old_a = a;
    int old_b = b;
    a = old_b + 1;
    b = old_a + 1;
  }
};
// By default, "sum" is an output signal assigned in always_comb.
class Adder1 {
public:
  int sum;
  void add(int a, int b) {
    sum = a + b;
  }
};

// We can force Metron to emit "sum" as a register by reading from it before
// we write to it.
class Adder2 {
public:
  int sum;
  void add(int a, int b) {
    int dummy = sum;
    sum = a + b;
  }
};

// Or we can prefix the function name with "tick", which does basically the
// same thing.
class Adder3 {
public:
  int sum;
  void tick_add(int a, int b) {
    sum = a + b;
  }
};
// Tutorial 3

class Module {
public:
};
#include "metron_tools.h"
#include "blockram.h"

//------------------------------------------------------------------------------

class Checksum {
public:

  int get_checksum() const {
    return sum;
  }

  int get_done() const {
    return cursor == 256;
  }

  void tock(int reset) {
    logic<8> data = ram.get_data();
    ram.tick(cursor, 0, 0);
    tick(reset, data);
  }

private:

  void tick(int reset, logic<8> data) {
    if (reset) {
      cursor = 0;
      sum = 0;
    }
    else {
      if (cursor < 256) {
        cursor = cursor + 1;
        sum = sum + data;
      }
    }
  }

  int cursor;
  int sum;
  Blockram ram;
};

//------------------------------------------------------------------------------
#include "adder.h"
#include "counter.h"

class ModuleWithSubmodules {
public:
  int update() {
    // The field "my_counter.count" is a register, which means we can only read
    // it _before_ it is written. Uncomment this line to see the error if we
    // call update() on the counter before we send its value to the adder.
    // my_counter.update();

    // Each branch of our if() can call my_adder.add, but we can only have one
    // call to it total per code path.
    int result;
    if (1) {
      result = my_adder.add(my_counter.count, 7);
    }
    else {
      result = my_adder.add(23, my_counter.count);
    }

    // If we try to call it a second time, Metron will generate an error.
    // int result2 = my_adder.add(3, 4);

    // The counter's update() method is a tick, but the method we're currently
    // in is a tock. This cross-module, cross-tick/tock call is OK.
    my_counter.update();
    return result;
  }

private:
  // Metron will generate and bind variables to our submodules during
  // conversion so that we can "call" methods in them.
  Adder my_adder;
  Counter my_counter;
};
class ModuleWithPureFunction {
public:

  // Tock methods can call pure functions.
  int get_signal1(int x) {
    return reg1 + my_pure_func(x);
  }

  // Tick methods can call pure functions.
  void update_reg() {
    reg1 = my_pure_func(reg1);
  }

private:
  int reg1;

  // This pure function is called elsewhere in the module, so it would not be
  // added to the port list even if it were public.
  int my_pure_func(int x) const {
    return x + 17;
  }

  // This pure function would appear in the port list if it were public.
  // Uncomment the line below to see the difference.
//public:
  int my_pure_func2(int x) const {
    return x + 17;
  }
};

//----------------------------------------

class ModuleWithImpureFunction {
public:
  int sig1;
  int sig2;

  // The top-level tock method will become an always_comb
  void tock1() {
    sig1 = tock2();
  }

  // This could be a function, but right now some external tools handle this
  // case weird so we emit it as an always_comb with its own set of binding
  // variables.
  int tock2() {
    sig2 = 17;
    return sig2;
  }
};

//----------------------------------------

class ModuleWithTask {
public:
  int reg1;
  int reg2;

  // The top-level tick method will become an always_ff.
  void tick1() {
    reg1 = reg1 + 1;
    tick2();
  }

  // Tick methods called by other tick methods will become tasks.
  void tick2() {
    reg2 = reg2 + 1;
  }
};
class Adder {
public:
  int add(int a, int b) {
    return a + b;
  }
};

//----------

class Adder2 {
public:
  int a;
  int b;
  int sum;

  void add() {
    sum = a + b;
  }
};
// Tutorial 4

class Module {
public:
};
#include "metron_tools.h"

//------------------------------------------------------------------------------

class Blockram {
public:
  Blockram() {
    readmemh("blockram.hex", memory, 0, 255);
  }

  logic<8> get_data() const {
    return data_out;
  }

  void tick(logic<8> address, logic<1> write, logic<8> data_in) {
    if (write) {
      memory[address] = data_in;
      data_out = data_in;
    }
    else {
      data_out = memory[address];
    }
  }

private:
  logic<8> memory[256];
  logic<8> data_out;
};
class Tutorial2 {
public:

  int get_thing() {
    return 1;
  }
};
#include "metron_tools.h"

class Module {
  // Private only so we don't spam our port list for this example
private:

  // Logic types can be indexed like arrays that return individual bits.
  logic<1> extract_bit_four(logic<16> a) {
    return a[4];
  }

  // bN(x, offset) is shorthand for bx<N>(x, offset) which extracts a slice
  // of the bits in a field. Slices that overflow the source will be padded
  // with 0.
  logic<3> extract_three_bits_starting_at_bit_four(logic<16> a) {
    return b3(a, 4);
  }

  // Logic types can be concatenated together, and the result's bit width will
  // be the sum of the bit widths of the arguments.
  logic<3> concatenate(logic<1> a, logic<1> b, logic<1> c) {
    return cat(a, b, c);
  }

  // Logic types can be duplicated, which is equivalent to cat(x, x, x...). The
  // result's bit width will be the product of the argument width and the dup
  // count.
  logic<9> duplicate_three_times(logic<3> a) {
    return dup<3>(a);
  }
};
// A very basic counter in plain C++, converted to Verilog using Metron.

class Counter {
public:
  int count;
  void update() {
    count++;
  }
};
class NonBlockingAssignment {
public:
  int count;
  void update() {
    count = count + 1;
    int dummy = count;
  }
};
#include "metron_tools.h"

namespace MyPackage {
  static const int ADDER_WIDTH = 17;
  static const int INCREMENT_VAL = 3;
};

template<int width>
class AdjustableAdder {
public:
  logic<width> add(logic<width> a, logic<width> b) {
    return a + b;
  }
};

class Module {
  public:
  logic<MyPackage::ADDER_WIDTH> increment(logic<MyPackage::ADDER_WIDTH> x) {
    return x + MyPackage::INCREMENT_VAL;
  }

private:
  AdjustableAdder<MyPackage::ADDER_WIDTH> my_adder;
};
#ifndef UART_RX_H
#define UART_RX_H

#include "metron_tools.h"

//==============================================================================

template <int cycles_per_bit = 4>
class uart_rx {
public:
  logic<1> valid() {
    return _cursor == 1;
  }

  logic<8> buffer() {
    return _buffer;
  }

  logic<32> sum() {
    return _sum;
  }

  void tick(logic<1> i_rstn, logic<1> i_serial) {
    if (!i_rstn) {
      _cycle = 0;
      _cursor = 0;
      _buffer = 0;
      _sum = 0;
    } else {
      if (_cycle != 0) {
        _cycle = _cycle - 1;
      } else if (_cursor != 0) {
        logic<8> temp = (i_serial << 7) | (_buffer >> 1);
        if (_cursor - 1 == 1) _sum = _sum + temp;
        _cycle = cycle_max;
        _cursor = _cursor - 1;
        _buffer = temp;
      } else if (i_serial == 0) {
        _cycle = cycle_max;
        _cursor = cursor_max;
      }
    }
  }

 private:
  static const int cycle_bits = clog2(cycles_per_bit);
  static const int cycle_max = cycles_per_bit - 1;
  static const int cursor_max = 9;
  static const int cursor_bits = clog2(cursor_max);

  logic<cycle_bits> _cycle;
  logic<cursor_bits> _cursor;
  logic<8> _buffer;
  logic<32> _sum;
};

//==============================================================================

#endif // UART_RX_H
#ifndef UART_HELLO_H
#define UART_HELLO_H

#include "metron_tools.h"

//==============================================================================

template <int repeat_msg = 0>
class uart_hello {
public:
  uart_hello() {
    readmemh("examples/uart/message.hex", _memory, 0, 511);
  }

  logic<8> data() const {
    return _data;
  }

  logic<1> req() const {
    return _state == SEND;
  }

  logic<1> done() const {
    return _state == DONE;
  }

  void tick(logic<1> i_rstn, logic<1> i_cts, logic<1> i_idle) {
    if (!i_rstn) {
      _state = WAIT;
      _cursor = 0;
    } else {
      _data = _memory[_cursor];
      if (_state == WAIT && i_idle) {
        _state = SEND;
      } else if (_state == SEND && i_cts) {
        if (_cursor == b9(message_len - 1)) {
          _state = DONE;
        } else {
          _cursor = _cursor + 1;
        }
      } else if (_state == DONE) {
        if (repeat_msg) _state = WAIT;
        _cursor = 0;
      }
    }
  }

private:
  static const int message_len = 512;
  static const int cursor_bits = clog2(message_len);

  static const int WAIT = 0;
  static const int SEND = 1;
  static const int DONE = 2;

  logic<2> _state;
  logic<cursor_bits> _cursor;
  logic<8> _memory[512];
  logic<8> _data;
};

//==============================================================================

#endif // UART_HELLO_H
#ifndef UART_TOP_H
#define UART_TOP_H

#include "metron_tools.h"
#include "uart_hello.h"
#include "uart_rx.h"
#include "uart_tx.h"

//==============================================================================

template <int cycles_per_bit = 3, int repeat_msg = 0>
class uart_top {
public:
  logic<1> serial() {
    return tx.serial();
  }

  logic<8> data() {
    return rx.buffer();
  }

  logic<1> valid() {
    return rx.valid();
  }

  logic<1> done() {
    return hello.done() && tx.idle();
  }

  logic<32> sum() {
    return rx.sum();
  }

  logic<1> tock(logic<1> i_rstn) {
    logic<8> hello_data = hello.data();
    logic<1> hello_req = hello.req();

    rx.tick(i_rstn, tx.serial());
    hello.tick(i_rstn, tx.cts(), tx.idle());
    tx.tick(i_rstn, hello_data, hello_req);
    return 0;
  }

  //----------------------------------------
private:
  uart_hello<repeat_msg> hello;
  uart_tx<cycles_per_bit> tx;
  uart_rx<cycles_per_bit> rx;
};

//==============================================================================

#endif // UART_TOP_H
#ifndef UART_TX_H
#define UART_TX_H

#include "metron_tools.h"

//==============================================================================

template <int cycles_per_bit = 4>
class uart_tx {
public:
  uart_tx() {
    cycle = 0;
    cursor = 0;
    buffer = 0;
  }

  logic<1> serial() const {
    return buffer & 1;
  }

  logic<1> cts() const {
    return ((cursor == extra_stop_bits) && (cycle == 0)) ||
           (cursor < extra_stop_bits);
  }

  logic<1> idle() const {
    return (cursor == 0) && (cycle == 0);
  }

  void tick(logic<1> i_rstn, logic<8> i_data, logic<1> i_req) {
    if (!i_rstn) {
      cycle = 0;
      cursor = 0;
      buffer = 0x1FF;
    } else {
      logic<cycle_bits> cycle_max = bx<cycle_bits>(cycles_per_bit - 1);
      logic<cursor_bits> cursor_max = bx<cursor_bits>(10 + extra_stop_bits - 1);

      if (/*cursor <= extra_stop_bits*/ extra_stop_bits >= cursor &&
          cycle == 0 && i_req) {
        // Transmit start
        cycle = cycle_max;
        cursor = cursor_max;
        buffer = i_data << 1;
      } else if (cycle != 0) {
        // Bit delay
        cycle = cycle - 1;
        cursor = cursor;
        buffer = buffer;
      } else if (cursor != 0) {
        // Bit delay done, switch to next bit.
        cycle = cycle_max;
        cursor = cursor - 1;
        buffer = (buffer >> 1) | 0x100;
      }
    }
  }

private:
  // 1 start bit, 8 data bits, 1 stop bit, 7 additional stop bits to guarantee
  // that recevier can resync between messages
  static const int extra_stop_bits = 7;
  static const int cycle_bits = clog2(cycles_per_bit);
  static const int cursor_bits = clog2(10 + extra_stop_bits);

  logic<cycle_bits> cycle;
  logic<cursor_bits> cursor;
  logic<9> buffer;
};

//==============================================================================

#endif // UART_TX_H
