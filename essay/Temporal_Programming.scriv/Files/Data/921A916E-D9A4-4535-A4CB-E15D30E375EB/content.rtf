{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 RobotoMono-SemiBold;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\f0\fs22\cf0
\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\ltrch\loch {\f0\fs22\b0\i0 Around the same time that the first papers on synchronous programming were being written, Leslie Lamport wrote "The Temporal Logic of Actions" - it's a pretty dense research paper if you're not used to formal logic (I am not), but it lays out a framework for proving the correctness of concurrent systems - these could be threads in a process, nodes in a distributed system, or logic gates in a CPU. His later works defined the languages TLA+ and PlusCal, which allowed those proofs to be expressed in something more like a programming language.}
\par\plain \f0\fs22\b0\i0
\par\plain {\f0\fs22\b0\i0 At the core of Lamport's temporal logic is a very simple model of computation - programs move through time in discrete steps by computing "new" state from "old" state. We can state that a bit more formally as the simple recurrence "x' = f(x)", where "x" represents the _old_ state of the program, "x'" represents the _new_ state of the program, and "f" is a pure function that computes the entire new state from the old state. If we add an input and output we get "(x, o)' = f(x, i)", which is roughly equivalent to a Mealy machine except that our states and in/outputs are arbitrary data structures instead of sets of states and symbols.}
\par\plain \f0\fs22\b0\i0
\par\plain {\f0\fs22\b0\i0 While TLA+ and PlusCal are not exactly programming languages, they still allows developers to test properties of real-world programs by representing them as collections of atomic changes to global state (the contents of the 'f'), writing provable statements about the program's behavior (things like "x.foo will never exceed 10"), and then proving or disproving those statements for all possible sequences of states using the formal methods of temporal logic (complicated).}
\par\plain \f0\fs22\b0\i0}